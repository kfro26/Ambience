// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package g5.ambience.domain;

import g5.ambience.domain.BundleEntity;
import g5.ambience.domain.BundleEntityDataOnDemand;
import g5.ambience.domain.BundleEntityPK;
import g5.ambience.domain.ItemEntity;
import g5.ambience.domain.ItemEntityDataOnDemand;
import g5.ambience.domain.UserEntity;
import g5.ambience.domain.UserEntityDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect BundleEntityDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BundleEntityDataOnDemand: @Component;
    
    private Random BundleEntityDataOnDemand.rnd = new SecureRandom();
    
    private List<BundleEntity> BundleEntityDataOnDemand.data;
    
    @Autowired
    private ItemEntityDataOnDemand BundleEntityDataOnDemand.itemEntityDataOnDemand;
    
    @Autowired
    private UserEntityDataOnDemand BundleEntityDataOnDemand.userEntityDataOnDemand;
    
    public BundleEntity BundleEntityDataOnDemand.getNewTransientBundleEntity(int index) {
        BundleEntity obj = new BundleEntity();
        setEmbeddedIdClass(obj, index);
        setItemId(obj, index);
        setReturnedDate(obj, index);
        setUserRating(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void BundleEntityDataOnDemand.setEmbeddedIdClass(BundleEntity obj, int index) {
        Integer itemId = new Integer(index);
        Date checkedOutDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        String username = "username_" + index;
        if (username.length() > 45) {
            username = new Random().nextInt(10) + username.substring(1, 45);
        }
        
        BundleEntityPK embeddedIdClass = new BundleEntityPK(itemId, checkedOutDate, username);
        obj.setId(embeddedIdClass);
    }
    
    public void BundleEntityDataOnDemand.setItemId(BundleEntity obj, int index) {
        ItemEntity itemId = itemEntityDataOnDemand.getRandomItemEntity();
        obj.setItemId(itemId);
    }
    
    public void BundleEntityDataOnDemand.setReturnedDate(BundleEntity obj, int index) {
        Date returnedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setReturnedDate(returnedDate);
    }
    
    public void BundleEntityDataOnDemand.setUserRating(BundleEntity obj, int index) {
        Integer userRating = new Integer(index);
        obj.setUserRating(userRating);
    }
    
    public void BundleEntityDataOnDemand.setUsername(BundleEntity obj, int index) {
        UserEntity username = userEntityDataOnDemand.getRandomUserEntity();
        obj.setUsername(username);
    }
    
    public BundleEntity BundleEntityDataOnDemand.getSpecificBundleEntity(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        BundleEntity obj = data.get(index);
        BundleEntityPK id = obj.getId();
        return BundleEntity.findBundleEntity(id);
    }
    
    public BundleEntity BundleEntityDataOnDemand.getRandomBundleEntity() {
        init();
        BundleEntity obj = data.get(rnd.nextInt(data.size()));
        BundleEntityPK id = obj.getId();
        return BundleEntity.findBundleEntity(id);
    }
    
    public boolean BundleEntityDataOnDemand.modifyBundleEntity(BundleEntity obj) {
        return false;
    }
    
    public void BundleEntityDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = BundleEntity.findBundleEntityEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'BundleEntity' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<BundleEntity>();
        for (int i = 0; i < 10; i++) {
            BundleEntity obj = getNewTransientBundleEntity(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
