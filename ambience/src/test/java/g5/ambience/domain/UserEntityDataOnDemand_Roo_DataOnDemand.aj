// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package g5.ambience.domain;

import g5.ambience.domain.UserEntity;
import g5.ambience.domain.UserEntityDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect UserEntityDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserEntityDataOnDemand: @Component;
    
    private Random UserEntityDataOnDemand.rnd = new SecureRandom();
    
    private List<UserEntity> UserEntityDataOnDemand.data;
    
    public UserEntity UserEntityDataOnDemand.getNewTransientUserEntity(int index) {
        UserEntity obj = new UserEntity();
        setCcExpiration(obj, index);
        setCcName(obj, index);
        setCcNumber(obj, index);
        setCcSecurity(obj, index);
        setCity(obj, index);
        setDob(obj, index);
        setEmail(obj, index);
        setFirstName(obj, index);
        setLastName(obj, index);
        setMembershipPlan(obj, index);
        setPasswordHash(obj, index);
        setProfileImage(obj, index);
        setRole(obj, index);
        setState(obj, index);
        setStreet(obj, index);
        setStreetOpt(obj, index);
        setZipcode(obj, index);
        return obj;
    }
    
    public void UserEntityDataOnDemand.setCcExpiration(UserEntity obj, int index) {
        Date ccExpiration = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCcExpiration(ccExpiration);
    }
    
    public void UserEntityDataOnDemand.setCcName(UserEntity obj, int index) {
        String ccName = "ccName_" + index;
        if (ccName.length() > 60) {
            ccName = ccName.substring(0, 60);
        }
        obj.setCcName(ccName);
    }
    
    public void UserEntityDataOnDemand.setCcNumber(UserEntity obj, int index) {
        Integer ccNumber = new Integer(index);
        obj.setCcNumber(ccNumber);
    }
    
    public void UserEntityDataOnDemand.setCcSecurity(UserEntity obj, int index) {
        Integer ccSecurity = new Integer(index);
        obj.setCcSecurity(ccSecurity);
    }
    
    public void UserEntityDataOnDemand.setCity(UserEntity obj, int index) {
        String city = "city_" + index;
        if (city.length() > 45) {
            city = city.substring(0, 45);
        }
        obj.setCity(city);
    }
    
    public void UserEntityDataOnDemand.setDob(UserEntity obj, int index) {
        Date dob = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDob(dob);
    }
    
    public void UserEntityDataOnDemand.setEmail(UserEntity obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 60) {
            email = new Random().nextInt(10) + email.substring(1, 60);
        }
        obj.setEmail(email);
    }
    
    public void UserEntityDataOnDemand.setFirstName(UserEntity obj, int index) {
        String firstName = "firstName_" + index;
        if (firstName.length() > 45) {
            firstName = firstName.substring(0, 45);
        }
        obj.setFirstName(firstName);
    }
    
    public void UserEntityDataOnDemand.setLastName(UserEntity obj, int index) {
        String lastName = "lastName_" + index;
        if (lastName.length() > 45) {
            lastName = lastName.substring(0, 45);
        }
        obj.setLastName(lastName);
    }
    
    public void UserEntityDataOnDemand.setMembershipPlan(UserEntity obj, int index) {
        String membershipPlan = "membershipPlan_" + index;
        if (membershipPlan.length() > 45) {
            membershipPlan = membershipPlan.substring(0, 45);
        }
        obj.setMembershipPlan(membershipPlan);
    }
    
    public void UserEntityDataOnDemand.setPasswordHash(UserEntity obj, int index) {
        String passwordHash = "passwordHash_" + index;
        if (passwordHash.length() > 32) {
            passwordHash = passwordHash.substring(0, 32);
        }
        obj.setPasswordHash(passwordHash);
    }
    
    public void UserEntityDataOnDemand.setProfileImage(UserEntity obj, int index) {
        String profileImage = "profileImage_" + index;
        if (profileImage.length() > 100) {
            profileImage = profileImage.substring(0, 100);
        }
        obj.setProfileImage(profileImage);
    }
    
    public void UserEntityDataOnDemand.setRole(UserEntity obj, int index) {
        String role = "role_" + index;
        if (role.length() > 45) {
            role = role.substring(0, 45);
        }
        obj.setRole(role);
    }
    
    public void UserEntityDataOnDemand.setState(UserEntity obj, int index) {
        String state = "state_" + index;
        if (state.length() > 45) {
            state = state.substring(0, 45);
        }
        obj.setState(state);
    }
    
    public void UserEntityDataOnDemand.setStreet(UserEntity obj, int index) {
        String street = "street_" + index;
        if (street.length() > 45) {
            street = street.substring(0, 45);
        }
        obj.setStreet(street);
    }
    
    public void UserEntityDataOnDemand.setStreetOpt(UserEntity obj, int index) {
        String streetOpt = "streetOpt_" + index;
        if (streetOpt.length() > 45) {
            streetOpt = streetOpt.substring(0, 45);
        }
        obj.setStreetOpt(streetOpt);
    }
    
    public void UserEntityDataOnDemand.setZipcode(UserEntity obj, int index) {
        Integer zipcode = new Integer(index);
        obj.setZipcode(zipcode);
    }
    
    public UserEntity UserEntityDataOnDemand.getSpecificUserEntity(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserEntity obj = data.get(index);
        String id = obj.getUsername();
        return UserEntity.findUserEntity(id);
    }
    
    public UserEntity UserEntityDataOnDemand.getRandomUserEntity() {
        init();
        UserEntity obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getUsername();
        return UserEntity.findUserEntity(id);
    }
    
    public boolean UserEntityDataOnDemand.modifyUserEntity(UserEntity obj) {
        return false;
    }
    
    public void UserEntityDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = UserEntity.findUserEntityEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserEntity' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserEntity>();
        for (int i = 0; i < 10; i++) {
            UserEntity obj = getNewTransientUserEntity(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
